/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category RegisterLp
 * @category generated
 */
export type RegisterLpInstructionArgs = {
  idealSize: beet.bignum;
  poolLifecycle: beet.bignum;
  tokenName: string;
  tokenSymbol: string;
  tokenMetadataUri: string;
};
/**
 * @category Instructions
 * @category RegisterLp
 * @category generated
 */
export const registerLpStruct = new beet.FixableBeetArgsStruct<
  RegisterLpInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["idealSize", beet.u64],
    ["poolLifecycle", beet.i64],
    ["tokenName", beet.utf8String],
    ["tokenSymbol", beet.utf8String],
    ["tokenMetadataUri", beet.utf8String],
  ],
  "RegisterLpInstructionArgs"
);
/**
 * Accounts required by the _registerLp_ instruction
 *
 * @property [_writable_, **signer**] lpCreator
 * @property [_writable_] lp
 * @property [_writable_] tokenisedMint
 * @property [_writable_] securityMint
 * @property [_writable_] metadata
 * @property [] tokenMetadataProgram
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RegisterLp
 * @category generated
 */
export type RegisterLpInstructionAccounts = {
  lpCreator: web3.PublicKey;
  lp: web3.PublicKey;
  tokenisedMint: web3.PublicKey;
  securityMint: web3.PublicKey;
  metadata: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const registerLpInstructionDiscriminator = [
  13, 72, 32, 220, 171, 116, 150, 226,
];

/**
 * Creates a _RegisterLp_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RegisterLp
 * @category generated
 */
export function createRegisterLpInstruction(
  accounts: RegisterLpInstructionAccounts,
  args: RegisterLpInstructionArgs,
  programId = new web3.PublicKey("DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix")
) {
  const [data] = registerLpStruct.serialize({
    instructionDiscriminator: registerLpInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.lpCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.lp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenisedMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.securityMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}

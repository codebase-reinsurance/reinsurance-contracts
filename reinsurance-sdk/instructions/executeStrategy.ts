/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category ExecuteStrategy
 * @category generated
 */
export const executeStrategyStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "ExecuteStrategyInstructionArgs"
);
/**
 * Accounts required by the _executeStrategy_ instruction
 *
 * @property [**signer**] executor
 * @property [_writable_] lp
 * @property [] proposal
 * @property [] insurance
 * @property [_writable_] premiumVault
 * @property [_writable_] premiumVaultTokenAccount
 * @property [_writable_] proposedStrategy
 * @property [] strategyProgram
 * @property [] executorAccount
 * @property [] usdcMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ExecuteStrategy
 * @category generated
 */
export type ExecuteStrategyInstructionAccounts = {
  executor: web3.PublicKey;
  lp: web3.PublicKey;
  proposal: web3.PublicKey;
  insurance: web3.PublicKey;
  premiumVault: web3.PublicKey;
  premiumVaultTokenAccount: web3.PublicKey;
  proposedStrategy: web3.PublicKey;
  strategyProgram: web3.PublicKey;
  executorAccount: web3.PublicKey;
  usdcMint: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const executeStrategyInstructionDiscriminator = [
  164, 197, 251, 183, 219, 177, 85, 161,
];

/**
 * Creates a _ExecuteStrategy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ExecuteStrategy
 * @category generated
 */
export function createExecuteStrategyInstruction(
  accounts: ExecuteStrategyInstructionAccounts,
  programId = new web3.PublicKey("DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix")
) {
  const [data] = executeStrategyStruct.serialize({
    instructionDiscriminator: executeStrategyInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.executor,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.lp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVaultTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposedStrategy,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.strategyProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.executorAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}

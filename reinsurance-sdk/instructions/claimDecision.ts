/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category ClaimDecision
 * @category generated
 */
export const claimDecisionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "ClaimDecisionInstructionArgs"
);
/**
 * Accounts required by the _claimDecision_ instruction
 *
 * @property [**signer**] decisionAsker
 * @property [_writable_] claim
 * @category Instructions
 * @category ClaimDecision
 * @category generated
 */
export type ClaimDecisionInstructionAccounts = {
  decisionAsker: web3.PublicKey;
  claim: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const claimDecisionInstructionDiscriminator = [
  118, 128, 130, 253, 33, 162, 74, 173,
];

/**
 * Creates a _ClaimDecision_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimDecision
 * @category generated
 */
export function createClaimDecisionInstruction(
  accounts: ClaimDecisionInstructionAccounts,
  programId = new web3.PublicKey("DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix")
) {
  const [data] = claimDecisionStruct.serialize({
    instructionDiscriminator: claimDecisionInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.decisionAsker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.claim,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category CallOffReinsurance
 * @category generated
 */
export const callOffReinsuranceStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "CallOffReinsuranceInstructionArgs"
);
/**
 * Accounts required by the _callOffReinsurance_ instruction
 *
 * @property [**signer**] lpCreator
 * @property [_writable_] lp
 * @property [_writable_] lpUsdcAccount
 * @property [_writable_] proposal
 * @property [_writable_] insurance
 * @property [_writable_] premiumVault (optional)
 * @property [_writable_] premiumVaultTokenAccount (optional)
 * @property [] usdcMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CallOffReinsurance
 * @category generated
 */
export type CallOffReinsuranceInstructionAccounts = {
  lpCreator: web3.PublicKey;
  lp: web3.PublicKey;
  lpUsdcAccount: web3.PublicKey;
  proposal: web3.PublicKey;
  insurance: web3.PublicKey;
  premiumVault?: web3.PublicKey;
  premiumVaultTokenAccount?: web3.PublicKey;
  usdcMint: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const callOffReinsuranceInstructionDiscriminator = [
  160, 187, 222, 238, 122, 8, 187, 130,
];

/**
 * Creates a _CallOffReinsurance_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CallOffReinsurance
 * @category generated
 */
export function createCallOffReinsuranceInstruction(
  accounts: CallOffReinsuranceInstructionAccounts,
  programId = new web3.PublicKey("DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix")
) {
  const [data] = callOffReinsuranceStruct.serialize({
    instructionDiscriminator: callOffReinsuranceInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.lpCreator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.lp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lpUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVault ?? programId,
      isWritable: accounts.premiumVault != null,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVaultTokenAccount ?? programId,
      isWritable: accounts.premiumVaultTokenAccount != null,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}

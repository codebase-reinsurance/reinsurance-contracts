/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link ReInsuranceProposal}
 * @category Accounts
 * @category generated
 */
export type ReInsuranceProposalArgs = {
  bump: number;
  lpOwner: web3.PublicKey;
  proposedCommision: beet.bignum;
  proposedUndercollaterization: beet.bignum;
  insurance: web3.PublicKey;
  proposalDocs: string;
  proposalId: string;
  proposalAccepted: boolean;
  proposalSent: boolean;
  proposalVote: beet.bignum;
  proposalVoteStart: beet.bignum;
};

export const reInsuranceProposalDiscriminator = [
  47, 10, 40, 254, 200, 82, 17, 11,
];
/**
 * Holds the data for the {@link ReInsuranceProposal} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ReInsuranceProposal implements ReInsuranceProposalArgs {
  private constructor(
    readonly bump: number,
    readonly lpOwner: web3.PublicKey,
    readonly proposedCommision: beet.bignum,
    readonly proposedUndercollaterization: beet.bignum,
    readonly insurance: web3.PublicKey,
    readonly proposalDocs: string,
    readonly proposalId: string,
    readonly proposalAccepted: boolean,
    readonly proposalSent: boolean,
    readonly proposalVote: beet.bignum,
    readonly proposalVoteStart: beet.bignum
  ) {}

  /**
   * Creates a {@link ReInsuranceProposal} instance from the provided args.
   */
  static fromArgs(args: ReInsuranceProposalArgs) {
    return new ReInsuranceProposal(
      args.bump,
      args.lpOwner,
      args.proposedCommision,
      args.proposedUndercollaterization,
      args.insurance,
      args.proposalDocs,
      args.proposalId,
      args.proposalAccepted,
      args.proposalSent,
      args.proposalVote,
      args.proposalVoteStart
    );
  }

  /**
   * Deserializes the {@link ReInsuranceProposal} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ReInsuranceProposal, number] {
    return ReInsuranceProposal.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ReInsuranceProposal} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<ReInsuranceProposal> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(
        `Unable to find ReInsuranceProposal account at ${address}`
      );
    }
    return ReInsuranceProposal.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, reInsuranceProposalBeet);
  }

  /**
   * Deserializes the {@link ReInsuranceProposal} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ReInsuranceProposal, number] {
    return reInsuranceProposalBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ReInsuranceProposal} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return reInsuranceProposalBeet.serialize({
      accountDiscriminator: reInsuranceProposalDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ReInsuranceProposal} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ReInsuranceProposalArgs) {
    const instance = ReInsuranceProposal.fromArgs(args);
    return reInsuranceProposalBeet.toFixedFromValue({
      accountDiscriminator: reInsuranceProposalDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ReInsuranceProposal} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ReInsuranceProposalArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ReInsuranceProposal.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link ReInsuranceProposal} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      lpOwner: this.lpOwner.toBase58(),
      proposedCommision: (() => {
        const x = <{ toNumber: () => number }>this.proposedCommision;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      proposedUndercollaterization: (() => {
        const x = <{ toNumber: () => number }>this.proposedUndercollaterization;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      insurance: this.insurance.toBase58(),
      proposalDocs: this.proposalDocs,
      proposalId: this.proposalId,
      proposalAccepted: this.proposalAccepted,
      proposalSent: this.proposalSent,
      proposalVote: (() => {
        const x = <{ toNumber: () => number }>this.proposalVote;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      proposalVoteStart: (() => {
        const x = <{ toNumber: () => number }>this.proposalVoteStart;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const reInsuranceProposalBeet = new beet.FixableBeetStruct<
  ReInsuranceProposal,
  ReInsuranceProposalArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["lpOwner", beetSolana.publicKey],
    ["proposedCommision", beet.u64],
    ["proposedUndercollaterization", beet.u64],
    ["insurance", beetSolana.publicKey],
    ["proposalDocs", beet.utf8String],
    ["proposalId", beet.utf8String],
    ["proposalAccepted", beet.bool],
    ["proposalSent", beet.bool],
    ["proposalVote", beet.u64],
    ["proposalVoteStart", beet.i64],
  ],
  ReInsuranceProposal.fromArgs,
  "ReInsuranceProposal"
);

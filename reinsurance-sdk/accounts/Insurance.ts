/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Insurance}
 * @category Accounts
 * @category generated
 */
export type InsuranceArgs = {
  bump: number;
  insuranceId: string;
  insurer: web3.PublicKey;
  coverage: beet.bignum;
  premium: beet.bignum;
  minimumCommission: beet.bignum;
  deductible: beet.bignum;
  expiry: beet.bignum;
  metadataLink: string;
  reinsured: boolean;
  premiumDue: beet.COption<beet.bignum>;
};

export const insuranceDiscriminator = [236, 126, 120, 155, 178, 253, 145, 150];
/**
 * Holds the data for the {@link Insurance} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Insurance implements InsuranceArgs {
  private constructor(
    readonly bump: number,
    readonly insuranceId: string,
    readonly insurer: web3.PublicKey,
    readonly coverage: beet.bignum,
    readonly premium: beet.bignum,
    readonly minimumCommission: beet.bignum,
    readonly deductible: beet.bignum,
    readonly expiry: beet.bignum,
    readonly metadataLink: string,
    readonly reinsured: boolean,
    readonly premiumDue: beet.COption<beet.bignum>
  ) {}

  /**
   * Creates a {@link Insurance} instance from the provided args.
   */
  static fromArgs(args: InsuranceArgs) {
    return new Insurance(
      args.bump,
      args.insuranceId,
      args.insurer,
      args.coverage,
      args.premium,
      args.minimumCommission,
      args.deductible,
      args.expiry,
      args.metadataLink,
      args.reinsured,
      args.premiumDue
    );
  }

  /**
   * Deserializes the {@link Insurance} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Insurance, number] {
    return Insurance.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Insurance} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Insurance> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Insurance account at ${address}`);
    }
    return Insurance.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, insuranceBeet);
  }

  /**
   * Deserializes the {@link Insurance} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Insurance, number] {
    return insuranceBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Insurance} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return insuranceBeet.serialize({
      accountDiscriminator: insuranceDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Insurance} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: InsuranceArgs) {
    const instance = Insurance.fromArgs(args);
    return insuranceBeet.toFixedFromValue({
      accountDiscriminator: insuranceDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Insurance} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: InsuranceArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Insurance.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link Insurance} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      insuranceId: this.insuranceId,
      insurer: this.insurer.toBase58(),
      coverage: (() => {
        const x = <{ toNumber: () => number }>this.coverage;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      premium: (() => {
        const x = <{ toNumber: () => number }>this.premium;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      minimumCommission: (() => {
        const x = <{ toNumber: () => number }>this.minimumCommission;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      deductible: (() => {
        const x = <{ toNumber: () => number }>this.deductible;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      expiry: (() => {
        const x = <{ toNumber: () => number }>this.expiry;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      metadataLink: this.metadataLink,
      reinsured: this.reinsured,
      premiumDue: this.premiumDue,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const insuranceBeet = new beet.FixableBeetStruct<
  Insurance,
  InsuranceArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["insuranceId", beet.utf8String],
    ["insurer", beetSolana.publicKey],
    ["coverage", beet.u64],
    ["premium", beet.u64],
    ["minimumCommission", beet.i64],
    ["deductible", beet.u64],
    ["expiry", beet.i64],
    ["metadataLink", beet.utf8String],
    ["reinsured", beet.bool],
    ["premiumDue", beet.coption(beet.i64)],
  ],
  Insurance.fromArgs,
  "Insurance"
);

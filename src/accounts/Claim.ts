/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Claim}
 * @category Accounts
 * @category generated
 */
export type ClaimArgs = {
  bump: number
  reinsurance: web3.PublicKey
  claimId: string
  claimAmount: beet.bignum
  claimMetadataLink: string
  claimVotingStart: beet.bignum
  voteFor: beet.bignum
  voteAgainst: beet.bignum
  accepted: beet.COption<boolean>
  claimed: boolean
}

export const claimDiscriminator = [155, 70, 22, 176, 123, 215, 246, 102]
/**
 * Holds the data for the {@link Claim} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Claim implements ClaimArgs {
  private constructor(
    readonly bump: number,
    readonly reinsurance: web3.PublicKey,
    readonly claimId: string,
    readonly claimAmount: beet.bignum,
    readonly claimMetadataLink: string,
    readonly claimVotingStart: beet.bignum,
    readonly voteFor: beet.bignum,
    readonly voteAgainst: beet.bignum,
    readonly accepted: beet.COption<boolean>,
    readonly claimed: boolean
  ) {}

  /**
   * Creates a {@link Claim} instance from the provided args.
   */
  static fromArgs(args: ClaimArgs) {
    return new Claim(
      args.bump,
      args.reinsurance,
      args.claimId,
      args.claimAmount,
      args.claimMetadataLink,
      args.claimVotingStart,
      args.voteFor,
      args.voteAgainst,
      args.accepted,
      args.claimed
    )
  }

  /**
   * Deserializes the {@link Claim} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Claim, number] {
    return Claim.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Claim} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Claim> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Claim account at ${address}`)
    }
    return Claim.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, claimBeet)
  }

  /**
   * Deserializes the {@link Claim} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Claim, number] {
    return claimBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Claim} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return claimBeet.serialize({
      accountDiscriminator: claimDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Claim} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ClaimArgs) {
    const instance = Claim.fromArgs(args)
    return claimBeet.toFixedFromValue({
      accountDiscriminator: claimDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Claim} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ClaimArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Claim.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Claim} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      reinsurance: this.reinsurance.toBase58(),
      claimId: this.claimId,
      claimAmount: (() => {
        const x = <{ toNumber: () => number }>this.claimAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      claimMetadataLink: this.claimMetadataLink,
      claimVotingStart: (() => {
        const x = <{ toNumber: () => number }>this.claimVotingStart
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      voteFor: (() => {
        const x = <{ toNumber: () => number }>this.voteFor
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      voteAgainst: (() => {
        const x = <{ toNumber: () => number }>this.voteAgainst
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      accepted: this.accepted,
      claimed: this.claimed,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const claimBeet = new beet.FixableBeetStruct<
  Claim,
  ClaimArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['reinsurance', beetSolana.publicKey],
    ['claimId', beet.utf8String],
    ['claimAmount', beet.u64],
    ['claimMetadataLink', beet.utf8String],
    ['claimVotingStart', beet.i64],
    ['voteFor', beet.u64],
    ['voteAgainst', beet.u64],
    ['accepted', beet.coption(beet.bool)],
    ['claimed', beet.bool],
  ],
  Claim.fromArgs,
  'Claim'
)

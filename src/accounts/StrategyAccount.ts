/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link StrategyAccount}
 * @category Accounts
 * @category generated
 */
export type StrategyAccountArgs = {
  bump: number
  strategyProgram: web3.PublicKey
  streamAmount: beet.bignum
  lastStreamPayment: beet.COption<beet.bignum>
  streamEvery: beet.bignum
  numberOfStreams: beet.bignum
  strategyId: string
  premiumVault: web3.PublicKey
  vote: beet.bignum
  votingStart: beet.COption<beet.bignum>
  strategyAccepted: boolean
  strategyBlocked: boolean
}

export const strategyAccountDiscriminator = [
  97, 218, 254, 239, 248, 146, 59, 42,
]
/**
 * Holds the data for the {@link StrategyAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StrategyAccount implements StrategyAccountArgs {
  private constructor(
    readonly bump: number,
    readonly strategyProgram: web3.PublicKey,
    readonly streamAmount: beet.bignum,
    readonly lastStreamPayment: beet.COption<beet.bignum>,
    readonly streamEvery: beet.bignum,
    readonly numberOfStreams: beet.bignum,
    readonly strategyId: string,
    readonly premiumVault: web3.PublicKey,
    readonly vote: beet.bignum,
    readonly votingStart: beet.COption<beet.bignum>,
    readonly strategyAccepted: boolean,
    readonly strategyBlocked: boolean
  ) {}

  /**
   * Creates a {@link StrategyAccount} instance from the provided args.
   */
  static fromArgs(args: StrategyAccountArgs) {
    return new StrategyAccount(
      args.bump,
      args.strategyProgram,
      args.streamAmount,
      args.lastStreamPayment,
      args.streamEvery,
      args.numberOfStreams,
      args.strategyId,
      args.premiumVault,
      args.vote,
      args.votingStart,
      args.strategyAccepted,
      args.strategyBlocked
    )
  }

  /**
   * Deserializes the {@link StrategyAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StrategyAccount, number] {
    return StrategyAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StrategyAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<StrategyAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find StrategyAccount account at ${address}`)
    }
    return StrategyAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, strategyAccountBeet)
  }

  /**
   * Deserializes the {@link StrategyAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StrategyAccount, number] {
    return strategyAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StrategyAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return strategyAccountBeet.serialize({
      accountDiscriminator: strategyAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StrategyAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StrategyAccountArgs) {
    const instance = StrategyAccount.fromArgs(args)
    return strategyAccountBeet.toFixedFromValue({
      accountDiscriminator: strategyAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StrategyAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StrategyAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StrategyAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link StrategyAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      strategyProgram: this.strategyProgram.toBase58(),
      streamAmount: (() => {
        const x = <{ toNumber: () => number }>this.streamAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastStreamPayment: this.lastStreamPayment,
      streamEvery: (() => {
        const x = <{ toNumber: () => number }>this.streamEvery
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      numberOfStreams: (() => {
        const x = <{ toNumber: () => number }>this.numberOfStreams
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      strategyId: this.strategyId,
      premiumVault: this.premiumVault.toBase58(),
      vote: (() => {
        const x = <{ toNumber: () => number }>this.vote
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      votingStart: this.votingStart,
      strategyAccepted: this.strategyAccepted,
      strategyBlocked: this.strategyBlocked,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const strategyAccountBeet = new beet.FixableBeetStruct<
  StrategyAccount,
  StrategyAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['strategyProgram', beetSolana.publicKey],
    ['streamAmount', beet.u64],
    ['lastStreamPayment', beet.coption(beet.i64)],
    ['streamEvery', beet.i64],
    ['numberOfStreams', beet.u64],
    ['strategyId', beet.utf8String],
    ['premiumVault', beetSolana.publicKey],
    ['vote', beet.u64],
    ['votingStart', beet.coption(beet.i64)],
    ['strategyAccepted', beet.bool],
    ['strategyBlocked', beet.bool],
  ],
  StrategyAccount.fromArgs,
  'StrategyAccount'
)

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ReleaseSecurity
 * @category generated
 */
export const releaseSecurityStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ReleaseSecurityInstructionArgs'
)
/**
 * Accounts required by the _releaseSecurity_ instruction
 *
 * @property [**signer**] lpCreator
 * @property [] insuranceCreator
 * @property [_writable_] insuranceCreatorTokenAccount
 * @property [_writable_] lp
 * @property [_writable_] lpUsdcAccount
 * @property [] insurance
 * @property [] proposal
 * @property [] usdcMint
 * @property [_writable_] claim
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ReleaseSecurity
 * @category generated
 */
export type ReleaseSecurityInstructionAccounts = {
  lpCreator: web3.PublicKey
  insuranceCreator: web3.PublicKey
  insuranceCreatorTokenAccount: web3.PublicKey
  lp: web3.PublicKey
  lpUsdcAccount: web3.PublicKey
  insurance: web3.PublicKey
  proposal: web3.PublicKey
  usdcMint: web3.PublicKey
  claim: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const releaseSecurityInstructionDiscriminator = [
  92, 66, 228, 215, 118, 117, 47, 235,
]

/**
 * Creates a _ReleaseSecurity_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ReleaseSecurity
 * @category generated
 */
export function createReleaseSecurityInstruction(
  accounts: ReleaseSecurityInstructionAccounts,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = releaseSecurityStruct.serialize({
    instructionDiscriminator: releaseSecurityInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.lpCreator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.insuranceCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.insuranceCreatorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lpUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.claim,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

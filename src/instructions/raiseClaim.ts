/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RaiseClaim
 * @category generated
 */
export type RaiseClaimInstructionArgs = {
  claimId: string
  claimAmount: beet.bignum
  claimMetadataLink: string
}
/**
 * @category Instructions
 * @category RaiseClaim
 * @category generated
 */
export const raiseClaimStruct = new beet.FixableBeetArgsStruct<
  RaiseClaimInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['claimId', beet.utf8String],
    ['claimAmount', beet.u64],
    ['claimMetadataLink', beet.utf8String],
  ],
  'RaiseClaimInstructionArgs'
)
/**
 * Accounts required by the _raiseClaim_ instruction
 *
 * @property [_writable_, **signer**] insuranceCreator
 * @property [] insurance
 * @property [_writable_] lp
 * @property [_writable_] proposal
 * @property [_writable_] claim
 * @category Instructions
 * @category RaiseClaim
 * @category generated
 */
export type RaiseClaimInstructionAccounts = {
  insuranceCreator: web3.PublicKey
  insurance: web3.PublicKey
  lp: web3.PublicKey
  proposal: web3.PublicKey
  claim: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const raiseClaimInstructionDiscriminator = [
  82, 27, 166, 20, 46, 132, 162, 69,
]

/**
 * Creates a _RaiseClaim_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RaiseClaim
 * @category generated
 */
export function createRaiseClaimInstruction(
  accounts: RaiseClaimInstructionAccounts,
  args: RaiseClaimInstructionArgs,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = raiseClaimStruct.serialize({
    instructionDiscriminator: raiseClaimInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.insuranceCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.claim,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

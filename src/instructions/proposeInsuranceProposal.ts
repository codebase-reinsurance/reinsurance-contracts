/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ProposeInsuranceProposal
 * @category generated
 */
export type ProposeInsuranceProposalInstructionArgs = {
  proposalId: string
  proposalDocs: string
  proposedCommision: beet.bignum
  proposedUndercollaterization: beet.bignum
}
/**
 * @category Instructions
 * @category ProposeInsuranceProposal
 * @category generated
 */
export const proposeInsuranceProposalStruct = new beet.FixableBeetArgsStruct<
  ProposeInsuranceProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['proposalId', beet.utf8String],
    ['proposalDocs', beet.utf8String],
    ['proposedCommision', beet.u64],
    ['proposedUndercollaterization', beet.u64],
  ],
  'ProposeInsuranceProposalInstructionArgs'
)
/**
 * Accounts required by the _proposeInsuranceProposal_ instruction
 *
 * @property [_writable_, **signer**] proposalProposer
 * @property [] lp
 * @property [] insurance
 * @property [_writable_] proposal
 * @property [] tokenisedMint
 * @property [_writable_] proposalTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ProposeInsuranceProposal
 * @category generated
 */
export type ProposeInsuranceProposalInstructionAccounts = {
  proposalProposer: web3.PublicKey
  lp: web3.PublicKey
  insurance: web3.PublicKey
  proposal: web3.PublicKey
  tokenisedMint: web3.PublicKey
  proposalTokenAccount: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const proposeInsuranceProposalInstructionDiscriminator = [
  106, 187, 243, 169, 13, 222, 109, 4,
]

/**
 * Creates a _ProposeInsuranceProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProposeInsuranceProposal
 * @category generated
 */
export function createProposeInsuranceProposalInstruction(
  accounts: ProposeInsuranceProposalInstructionAccounts,
  args: ProposeInsuranceProposalInstructionArgs,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = proposeInsuranceProposalStruct.serialize({
    instructionDiscriminator: proposeInsuranceProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proposalProposer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.lp,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenisedMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

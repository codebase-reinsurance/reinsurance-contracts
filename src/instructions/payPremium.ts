/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PayPremium
 * @category generated
 */
export type PayPremiumInstructionArgs = {
  premiumMultiplier: beet.bignum
}
/**
 * @category Instructions
 * @category PayPremium
 * @category generated
 */
export const payPremiumStruct = new beet.BeetArgsStruct<
  PayPremiumInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['premiumMultiplier', beet.u64],
  ],
  'PayPremiumInstructionArgs'
)
/**
 * Accounts required by the _payPremium_ instruction
 *
 * @property [_writable_, **signer**] insuranceCreator
 * @property [_writable_] insuranceCreatorUsdcAccount
 * @property [] insurance
 * @property [] lp
 * @property [_writable_] premiumVault
 * @property [_writable_] premiumVaultTokenAccount
 * @property [] proposal
 * @property [] usdcMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category PayPremium
 * @category generated
 */
export type PayPremiumInstructionAccounts = {
  insuranceCreator: web3.PublicKey
  insuranceCreatorUsdcAccount: web3.PublicKey
  insurance: web3.PublicKey
  lp: web3.PublicKey
  premiumVault: web3.PublicKey
  premiumVaultTokenAccount: web3.PublicKey
  proposal: web3.PublicKey
  usdcMint: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const payPremiumInstructionDiscriminator = [
  156, 253, 113, 97, 167, 54, 253, 245,
]

/**
 * Creates a _PayPremium_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PayPremium
 * @category generated
 */
export function createPayPremiumInstruction(
  accounts: PayPremiumInstructionAccounts,
  args: PayPremiumInstructionArgs,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = payPremiumStruct.serialize({
    instructionDiscriminator: payPremiumInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.insuranceCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.insuranceCreatorUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lp,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.premiumVaultTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

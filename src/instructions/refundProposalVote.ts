/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RefundProposalVote
 * @category generated
 */
export const refundProposalVoteStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RefundProposalVoteInstructionArgs'
)
/**
 * Accounts required by the _refundProposalVote_ instruction
 *
 * @property [**signer**] voter
 * @property [_writable_] voterTokenAccount
 * @property [] lp
 * @property [] tokenisedMint
 * @property [_writable_] voteProposalAccount
 * @property [_writable_] voteProposalTokenAccount
 * @property [] insurance
 * @property [] proposal
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RefundProposalVote
 * @category generated
 */
export type RefundProposalVoteInstructionAccounts = {
  voter: web3.PublicKey
  voterTokenAccount: web3.PublicKey
  lp: web3.PublicKey
  tokenisedMint: web3.PublicKey
  voteProposalAccount: web3.PublicKey
  voteProposalTokenAccount: web3.PublicKey
  insurance: web3.PublicKey
  proposal: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const refundProposalVoteInstructionDiscriminator = [
  171, 229, 69, 23, 150, 218, 15, 212,
]

/**
 * Creates a _RefundProposalVote_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RefundProposalVote
 * @category generated
 */
export function createRefundProposalVoteInstruction(
  accounts: RefundProposalVoteInstructionAccounts,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = refundProposalVoteStruct.serialize({
    instructionDiscriminator: refundProposalVoteInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.voter,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.voterTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lp,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenisedMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.voteProposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.voteProposalTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

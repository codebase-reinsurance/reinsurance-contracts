/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RegisterInsurance
 * @category generated
 */
export type RegisterInsuranceInstructionArgs = {
  insuranceId: string
  coverage: beet.bignum
  premium: beet.bignum
  minimumCommission: beet.bignum
  deductible: beet.bignum
  expiry: beet.bignum
  metadataLink: string
}
/**
 * @category Instructions
 * @category RegisterInsurance
 * @category generated
 */
export const registerInsuranceStruct = new beet.FixableBeetArgsStruct<
  RegisterInsuranceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['insuranceId', beet.utf8String],
    ['coverage', beet.u64],
    ['premium', beet.u64],
    ['minimumCommission', beet.i64],
    ['deductible', beet.u64],
    ['expiry', beet.i64],
    ['metadataLink', beet.utf8String],
  ],
  'RegisterInsuranceInstructionArgs'
)
/**
 * Accounts required by the _registerInsurance_ instruction
 *
 * @property [_writable_, **signer**] insuranceCreator
 * @property [] insurer
 * @property [_writable_] insurance
 * @category Instructions
 * @category RegisterInsurance
 * @category generated
 */
export type RegisterInsuranceInstructionAccounts = {
  insuranceCreator: web3.PublicKey
  insurer: web3.PublicKey
  insurance: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const registerInsuranceInstructionDiscriminator = [
  102, 173, 104, 203, 180, 198, 101, 109,
]

/**
 * Creates a _RegisterInsurance_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RegisterInsurance
 * @category generated
 */
export function createRegisterInsuranceInstruction(
  accounts: RegisterInsuranceInstructionAccounts,
  args: RegisterInsuranceInstructionArgs,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = registerInsuranceStruct.serialize({
    instructionDiscriminator: registerInsuranceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.insuranceCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.insurer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

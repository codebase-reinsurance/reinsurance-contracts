/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category VoteInsuranceProposal
 * @category generated
 */
export type VoteInsuranceProposalInstructionArgs = {
  transferAmount: beet.bignum
}
/**
 * @category Instructions
 * @category VoteInsuranceProposal
 * @category generated
 */
export const voteInsuranceProposalStruct = new beet.BeetArgsStruct<
  VoteInsuranceProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['transferAmount', beet.u64],
  ],
  'VoteInsuranceProposalInstructionArgs'
)
/**
 * Accounts required by the _voteInsuranceProposal_ instruction
 *
 * @property [_writable_, **signer**] voter
 * @property [_writable_] voterTokenAccount
 * @property [] lp
 * @property [] tokenisedMint
 * @property [_writable_] voteProposalAccount
 * @property [_writable_] voteProposalTokenAccount
 * @property [] insurance
 * @property [_writable_] proposal
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category VoteInsuranceProposal
 * @category generated
 */
export type VoteInsuranceProposalInstructionAccounts = {
  voter: web3.PublicKey
  voterTokenAccount: web3.PublicKey
  lp: web3.PublicKey
  tokenisedMint: web3.PublicKey
  voteProposalAccount: web3.PublicKey
  voteProposalTokenAccount: web3.PublicKey
  insurance: web3.PublicKey
  proposal: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const voteInsuranceProposalInstructionDiscriminator = [
  24, 116, 81, 78, 160, 210, 14, 136,
]

/**
 * Creates a _VoteInsuranceProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VoteInsuranceProposal
 * @category generated
 */
export function createVoteInsuranceProposalInstruction(
  accounts: VoteInsuranceProposalInstructionAccounts,
  args: VoteInsuranceProposalInstructionArgs,
  programId = new web3.PublicKey('DajsLYULhHh3SVSDHsCCvnuHD8JeXgVf5mjfnQWpwzix')
) {
  const [data] = voteInsuranceProposalStruct.serialize({
    instructionDiscriminator: voteInsuranceProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.voter,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.voterTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lp,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenisedMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.voteProposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.voteProposalTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.insurance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
